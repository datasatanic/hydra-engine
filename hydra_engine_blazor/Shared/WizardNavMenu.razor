@using hydra_engine_blazor.Models
@using DefaultNamespace
@inject WizardContainer WizardContainer
@inject WizardModel WizardModel
<ul class="tree">
    <li
        @ondblclick:stopPropagation="true">
        <div class="item-container @(WizardContainer.WizardState.CurrentStep == Root ? "active-link" : "")">
            <img class="@(!string.IsNullOrEmpty(WizardContainer.WizardState.CurrentStep) && 
                          WizardContainer.WizardState.CurrentStep != Root 
                          && string.Join("/", WizardContainer.WizardState.CurrentStep.Split("/").Skip(0).Take(OutputUrlList.Length)) == Root
                           && Settings.SubType == "config" ? "success" : "")"/>
            <h4 class="@(!string.IsNullOrEmpty(WizardContainer.WizardState.CurrentStep) && WizardContainer.WizardState.CurrentStep != Root && string.Join("/", WizardContainer.WizardState.CurrentStep.Split("/").Skip(0).Take(OutputUrlList.Length)) == Root ? "passed-step" : "")">@Settings.DisplayName[..1].ToUpper()@Settings.DisplayName[1..]
            </h4>
            @if (Settings.SubType == "site")
            {
                var findSite = WizardContainer.WizardState.Sites.Find(item => item.SiteName == Settings.Name);
                if (findSite != null)
                {
                    switch (findSite.StatusEnum)
                    {
                        case ArchStatus.InProgress:
                            <div class="in-progress">Deploying</div>
                            break;
                        case ArchStatus.Completed:
                            <div class="deployed">Deployed</div>
                            break;
                    }
                }
            }
        </div>
        @if (WizardContainer.WizardState.CurrentStep == Root && WizardModel.ControlsMeta != null)
        {
            foreach(var elem in WizardModel.ControlsMeta.Elem)
            {
                foreach(var kvp in elem)
                {
                    <ElementsKeysTree Key="@kvp.Key" ElemInfo="@kvp.Value" Depth="1" SendValue="() => WizardModel.NotifyStateChanged()"></ElementsKeysTree>
                }
            }
        }
        
    </li>
    <div id="@($"r{Root.GetHashCode()}")">
        @foreach (var item in Settings.Child.Where(item=>item.Type == "form"))
        {
            var href = Root + "/" + item.Name;
            var displayName = DisplayNamePath + "/" + item.DisplayName;
            <WizardNavMenu Settings="@item" Root="@href" DisplayNamePath="@displayName"/>
        }
    </div>
</ul>

@code {
    [Parameter]
    public ControlsMeta Settings { get; set; }
    [Parameter]
    public string Root{ get; set; }
    [Parameter]
    public string DisplayNamePath { get; set; }
    private string link_margin;
    private string[] OutputUrlList=>Root.Split("/");
    private bool collapseNavMenu = true;
    private string? NavMenuCssClass => collapseNavMenu ? "collapse" : null;

    protected override void OnParametersSet()
    {
        var count = OutputUrlList.Length;
        link_margin = $"margin-left:{(count - 1) * 20}px";
    }
    

}