@using hydra_engine_blazor.Models
@inherits LayoutComponentBase
@inject SettingsContainer SettingsContainer
@inject NavigationManager Navigation
@using Blazored.Toast.Configuration
<div class="page">
    <div @ref="_elementReference" class="menu-container" style="@($"width:{containerWidth}px")" @onmousemove="ResizeCallback">
        <h1>Dockermodule</h1>
        <div class="search-container">
            <div class="input-search-container">
                <input id="tree-search" type="search" value="@searchValue" @oninput="SearchCallback"/>
                <img/>
            </div>
            <div class="expand-collapse-container">
                <img @onclick="() => SettingsContainer.Expand=true"/>
                <img @onclick="() => SettingsContainer.Expand=false"/>
            </div>
        </div>
        <div class="sidebar">
            @if (searchForms.Count == 0)
            {
                foreach (var node in _settingsTree.Child)
                {
                    <NavMenu Settings="@node" Root="@node.Name" DisplayNamePath="@node.DisplayName"/>
                }
            }
            else
            {
                <ul class="search-list">
                    @foreach (var form in searchForms)
                    {
                        <li>
                            <div @onclick="() => Navigation.NavigateTo(form.Key)">@form.Value.Value</div>
                            <h4>@form.Value.Key[1..]</h4>
                        </li>
                    }
                </ul>
            }
            
        </div>
        <div class="slider-container" @onmouseout="()=>resize=false" @onmousedown="()=>resize = true" @onmouseup="()=>resize=false">
            <img class="slider"/>
        </div>
        
    </div>
    <main>
        <article>
            @Body
        </article>
    </main>
    <BlazoredToasts Position="ToastPosition.BottomRight"
                    Timeout="10"/>
</div>

@code{
    public ControlsMeta _settingsTree = new();
    private bool resize;
    private ElementReference _elementReference;
    private Dictionary<string,KeyValuePair<string,string>> searchForms;
    private string? searchValue;
    private double containerWidth = 460;
    protected override async Task OnInitializedAsync()
    {
        SettingsContainer.Expand = true;
        searchForms = new Dictionary<string, KeyValuePair<string,string>>();
        var query = await SettingsContainer.GetTree();
        _settingsTree.Name = "tree";
        if (query != null) JsonParser.DeserializeTree(query.ToString(),_settingsTree,_settingsTree.Child);
    }

    private void ResizeCallback(MouseEventArgs obj)
    {
        if (resize) containerWidth = obj.PageX;
    }

    private void SearchCallback(ChangeEventArgs obj)
    {
        searchForms.Clear();
        searchValue = obj.Value?.ToString();
        FindForms(_settingsTree.Child,"","");
    }

    private void FindForms(List<ControlsMeta> forms,string root,string displayName)
    {
        foreach (var form in forms)
        {
            var outputUrl = root+"/"+form.Name;
            var displayNameUrl = displayName + "/" + form.DisplayName;
            if (form.DisplayName.Contains(searchValue,StringComparison.OrdinalIgnoreCase) & !string.IsNullOrEmpty(searchValue))
            {
                searchForms.Add(outputUrl,new KeyValuePair<string, string>(displayNameUrl,form.DisplayName));
            }
            FindForms(form.Child,outputUrl,displayNameUrl);
            
        }
    }

}