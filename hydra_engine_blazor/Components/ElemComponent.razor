@using System.Text.Json
@using System.Text.Json.Serialization
@using System.Text.Encodings.Web
@using hydra_engine_blazor.Models
@using System.Globalization
@using System.ComponentModel.DataAnnotations
@using System.Runtime.InteropServices
@using System.Text
@inject IJSRuntime JSRuntime
@inject SettingsContainer SettingsContainer
@if (elemInfo != null)
{
    @if (elemInfo.type != ElemType.Array)
    {
        switch (elemInfo.control)
        {
            case Control.Textarea:
                <div class="elem-container">
                    <h4>@elemInfo.display_name</h4>
                    <textarea @attributes="ElementAttributes" @onchange="@((e)=>ChangeValue(e,Value,elemInfo.type))">@Value</textarea>
                </div>
                break;
            case Control.Range:
                <div class="elem-container">
                    <h4>@elemInfo.display_name</h4>
                    @{var range=JsonSerializer.Deserialize<Dictionary<string, int>>(Value.ToString());}
                    <div class="elem-container">
                        <h4>From</h4>
                        <input type="number" value="@range?.GetValueOrDefault("from", 0)"/>
                        <h4>To</h4>
                        <input type="number" value="@range?.GetValueOrDefault("to", 0)"/>
                    </div>
                </div>
                break;
            default:
                <div class="elem-container @(elemInfo.control==Control.Checkbox ? "elem-reverse" : "")">
                    <h4>@elemInfo.display_name</h4>
                    <input @attributes="ElementAttributes" value="@(elemInfo.control==Control.Checkbox ? "bool" : Value)" @onchange="@((e)=>ChangeValue(e,Value,elemInfo.type))"/>
                </div>
                break;

        }
        @if (string.IsNullOrEmpty(Value?.ToString()))
        {
            <div class="validation-message">Enter field</div>
        }
        else if (!TryParseToType(Value.ToString(),elemInfo?.type))
        {
            <div class="validation-message">Not @elemInfo.type type</div>
        }
    }
    else
    {
        <div class="elem-container">
            <fieldset>
                <legend>@elemInfo.display_name
                    <img @onclick="() => elemInfo.arrayItems.Add(string.Empty)"/>
                </legend>
                <div class="d-flex flex-column gap-3">
                    @for (var i = 0; i < elemInfo?.arrayItems.Count; i++)
                    {
                        var j = i;
                        var elem = elemInfo?.arrayItems[i];
                        <div class="position-relative">
                            @switch (elemInfo?.control)
                            {
                                case Control.Textarea:
                                    <div class="list-item-container">
                                        <textarea @attributes="ElementAttributes" validation-error="@(!TryParseToType(elem.ToString(), elemInfo?.sub_type))" @onchange="@((e) => ChangeArrayValue(e, j, elemInfo.sub_type))">@elem</textarea>
                                        <img @onclick="@(()=>RemoveArrayItem(j))"/>
                                    </div>
                                    break;
                                    case Control.Range:
                                        var range=JsonSerializer.Deserialize<Dictionary<string, int>>(elem.ToString());
                                        <div class="elem-container">
                                            <h4>From</h4>
                                            <input type="number" value="@range?.GetValueOrDefault("from", 0)"/>
                                            <h4>To</h4>
                                            <input type="number" value="@range?.GetValueOrDefault("to", 0)"/>
                                        </div>
                                        break;
                                default:
                                    <div class="list-item-container">
                                        <input @attributes="ElementAttributes" validation-error="@(!TryParseToType(elem.ToString(), elemInfo?.sub_type))" value="@elem" @onchange="@((e) => ChangeArrayValue(e, j, elemInfo.sub_type))"/>
                                        <img @onclick="@(()=>RemoveArrayItem(j))"/>
                                    </div>
                                    break;
                            }
                            @if (string.IsNullOrEmpty(elem.ToString()))
                            {
                                <div class="validation-message">Enter field</div>
                            }
                            else if (!TryParseToType(elem.ToString(), elemInfo?.sub_type))
                            {
                                <div class="validation-message">Not @elemInfo?.sub_type type</div>
                            }
                        </div>
                    }
                </div>
            </fieldset>
        </div>
    }
    
}

@code {
    [Parameter]
    public string Key { get; set; }
    [Parameter] public EventCallback<ElemInfo> SendValue { get; set; }
    [Parameter]
    public ElemInfo? elemInfo { get; set; }

    private string filePath => elemInfo.fileId;
    private object? Value { get; set; }
    private Dictionary<string, object>? ElementAttributes { get; set; } = new();



    protected override void OnInitialized()
    {
        ElementAttributes = new Dictionary<string, object>
        {
            {"disabled",elemInfo?.readOnly},
            {"tabindex",1},
            {"title",elemInfo?.description},
            {"validation-error",false}
        };
        Value = elemInfo.value;
        if (elemInfo.type == ElemType.Array)
        {
            elemInfo.arrayItems = JsonSerializer.Deserialize<List<object>>(Value.ToString());
        }
        elemInfo.isValid = true;
        AddElementAttributes(elemInfo);
    }
    

    private bool TryParseToType(string value,ElemType? type)
    {
        if (string.IsNullOrEmpty(value))
        {
            return false;
        }
        return type switch
        {
            ElemType.Double => CultureInfo.CurrentCulture.TwoLetterISOLanguageName switch
            {
                "en" => double.TryParse(value.Replace(",", "."), out _),
                "ru" => double.TryParse(value.Replace(".", ","), out _),
                _ => false
                },
            ElemType.Int => int.TryParse(value, out _),
            ElemType.DateTime => DateTime.TryParse(value, out _),
            ElemType.Bool => bool.TryParse(value, out _),
            _ => true
            };
    }

    private async Task ChangeValue(ChangeEventArgs obj,object? value,ElemType type)
    {
        Value = obj.Value?.ToString();
        value = obj.Value?.ToString();
        if (TryParseToType(value.ToString(),elemInfo?.type) && !string.IsNullOrEmpty(value.ToString()))
        {
            ElementAttributes["validation-error"] = false;
            elemInfo.isValid = true;
            switch (type)
            {
                case ElemType.String:
                    elemInfo.value = value;
                    break;
                case ElemType.Int:
                    elemInfo.value = int.Parse(value.ToString());
                    break;
                case ElemType.Double:
                    switch (CultureInfo.CurrentCulture.TwoLetterISOLanguageName)
                    {
                        case "en":
                            elemInfo.value = double.Parse(value.ToString().Replace(",", "."));
                            break;
                        case "ru":
                            elemInfo.value = double.Parse(value.ToString().Replace(".", ","));
                            break;
                    }
                    break;
                case ElemType.Bool:
                    elemInfo.value = bool.Parse(value.ToString());
                    break;
                case ElemType.DateTime:
                    elemInfo.value = DateTime.Parse(value.ToString());
                    break;
            }
        }
        else
        {
            ElementAttributes["validation-error"] = true;
            elemInfo.isValid = false;
        }
        await SendValue.InvokeAsync(elemInfo);
    }

    private async Task ChangeArrayValue(ChangeEventArgs obj,int i,ElemType type)
    {
        elemInfo.arrayItems[i]=obj.Value?.ToString();
        if (elemInfo?.arrayItems.Find(item => !TryParseToType(item?.ToString(), elemInfo?.sub_type) |
                                              string.IsNullOrEmpty(item.ToString())) == null)
        {
            elemInfo.isValid = true;
            switch (type)
            {
                case ElemType.String:
                    elemInfo.value = elemInfo.arrayItems;
                    break;
                case ElemType.Int:
                    elemInfo.value = elemInfo?.arrayItems.Select(item => int.Parse(item.ToString())).ToList();
                    break;
                case ElemType.Double:
                    List<double>? doubleArray;
                    switch (CultureInfo.CurrentCulture.TwoLetterISOLanguageName)
                    {
                        case "en":
                            elemInfo.value = elemInfo?.arrayItems.Select(item => double.Parse(item.ToString().Replace(",", "."))).ToList();
                            break;
                        case "ru":
                            elemInfo.value = elemInfo?.arrayItems.Select(item => double.Parse(item.ToString().Replace(",", "."))).ToList();
                            break;
                    }
                    break;
                case ElemType.Bool:
                    elemInfo.value = elemInfo?.arrayItems.Select(item => bool.Parse(item.ToString())).ToList();
                    break;
                case ElemType.DateTime:
                    elemInfo.value = elemInfo?.arrayItems.Select(item => DateTime.Parse(item.ToString())).ToList();
                    break;
            }
        }
        else
        {
            elemInfo.isValid = false;
        }
        await SendValue.InvokeAsync(elemInfo);
    }
    private void AddElementAttributes(ElemInfo? elemInfo)
    {
        switch (elemInfo?.control)
        {
            case Control.Text:
                ElementAttributes?.Add("type","text");
                break;
            case Control.Password:
                ElementAttributes?.Add("type","password");
                break;
            case Control.Date:
                ElementAttributes?.Add("type","date");
                break;
            case Control.Datetime:
                ElementAttributes?.Add("type","datetime-local");
                break;
            case Control.Time:
                ElementAttributes?.Add("type","time");
                break;
            case Control.Number:
                ElementAttributes?.Add("type","number");
                break;
            case Control.Checkbox:
                ElementAttributes?.Add("type","checkbox");
                ElementAttributes?.Add("checked", bool.Parse(Value.ToString()));
                break;
            case Control.Fieldset:
                break;
        }
        if (elemInfo.constraints is null) return;
        foreach (var constraint in elemInfo.constraints)
        {
            ElementAttributes?.Add(constraint.type, constraint.value);
        }
    }

    private async Task RemoveArrayItem(int pos)
    {
        elemInfo?.arrayItems.RemoveAt(pos);
        elemInfo.value = elemInfo.arrayItems;
        await SendValue.InvokeAsync(elemInfo);
    }

}