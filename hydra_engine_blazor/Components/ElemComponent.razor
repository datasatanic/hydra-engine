@using System.Text.Json
@using System.Text.Json.Serialization
@using System.Text.Encodings.Web
@using hydra_engine_blazor.Models
@using System.Globalization
@using System.ComponentModel.DataAnnotations
@using System.Linq.Expressions
@using System.Runtime.InteropServices
@using System.Text
@using System.Text.Json.Nodes
@using System.Text.RegularExpressions
@using Microsoft.JSInterop.Implementation
@using Microsoft.VisualBasic
@inject IJSRuntime JSRuntime
@inject SettingsContainer SettingsContainer
@inject WizardContainer WizardContainer
@implements IAsyncDisposable
@if (elemInfo != null)
{
    if (!(elemInfo.additional && !elemInfo.IsActive && elemInfo.readOnly))
    {
        @if (elemInfo.type != ElemType.Array)
        {
            <div class="position-relative" id="@(SettingsContainer.GetHash(Key))">
                @switch (elemInfo.control)
                {
                    case Control.Label:
                    {
                        var id = elemInfo.GetHashCode();
                        <ul class="dict-param @(Depth == 1 ? "border-size" : "")">
                            <li class="param-background @(IsArrayElement ? "in-array" : "") @(Depth % 3 == 1 && !elemInfo.Expand && IsArrayElement ? "gray" : "") @(Depth % 3 == 2 && !elemInfo.Expand && IsArrayElement ? "blue" : "") @(Depth % 3  == 0 && !elemInfo.Expand && IsArrayElement ? "purple" : "")">
                                <div>
                                    @if (!IsArrayElement)
                                    {
                                        <img @onclick="ExpandCallback" data-bs-toggle="collapse" data-bs-target="@($".multi-collapse{id}")" type="button" aria-controls="@($"dict{id} not-dict{id}")" aria-expanded="false"/>
                                    }
                                    <div class="dict-param-data @(IsArrayElement ? "in-array" : "") @(Depth % 3 == 1 && !elemInfo.Expand && IsArrayElement ? "gray" : "") @(Depth % 3 == 2 && !elemInfo.Expand && IsArrayElement ? "blue" : "") @(Depth % 3  == 0 && !elemInfo.Expand && IsArrayElement ? "purple" : "")">
                                        <div>
                                            @if (IsArrayElement)
                                            {
                                                <input class="active-toggle" type="checkbox" disabled="@(!elemInfo.additional || elemInfo.readOnly || elemInfo.disable)" checked="@elemInfo.IsActive" @onclick="ExcludeField"/>
                                            }
                                            <div class="@(!elemInfo.isValid ? "dot" : "") @(IsArrayElement ? "justify-dot" : "") param-name" data-bs-toggle="tooltip" data-bs-custom-class="hydra-tooltip" data-bs-html="true"
                                                                                                                                                                             data-bs-placement="bottom" data-bs-title="@(!string.IsNullOrEmpty(elemInfo.description) ? elemInfo.description : "No description")">@elemInfo.display_name</div>
                                            @if (IsArrayElement)
                                            {
                                                @switch (Depth % 3)
                                                {
                                                    case 1:
                                                        <img class="@(!elemInfo.Expand ? "expand-all" : "collapse-all") gray small" data-bs-toggle="collapse" data-bs-target="@($".multi-collapse{id}")" type="button" aria-controls="@($"dict{id} not-dict{id}")" aria-expanded="false" @onclick="ExpandCollapseElement"/>
                                                        break;
                                                    case 2:
                                                        <img class="@(!elemInfo.Expand ? "expand-all" : "collapse-all") blue small" data-bs-toggle="collapse" data-bs-target="@($".multi-collapse{id}")" type="button" aria-controls="@($"dict{id} not-dict{id}")" aria-expanded="false" @onclick="ExpandCollapseElement"/>
                                                        break;
                                                    case 0:
                                                        <img class="@(!elemInfo.Expand ? "expand-all" : "collapse-all") purple small" data-bs-toggle="collapse" data-bs-target="@($".multi-collapse{id}")" type="button" aria-controls="@($"dict{id} not-dict{id}")" aria-expanded="false" @onclick="ExpandCollapseElement"/>
                                                        break;
                                                }
                                            }
                                        </div>
                                        <div class="@(string.IsNullOrEmpty(elemInfo.description) ? "collapse" : "")">@elemInfo.description</div>
                                        @if (elemInfo.sub_type_schema.Any(item => item.Value.type != ElemType.Dict))
                                        {
                                            <div class="@($"multi-collapse{id}") collapse" id="@($"not-dict{id}")">
                                                <div class="not-dict-container @(IsArrayElement ? "in-array" : "")">
                                                    @{ var maxLength = elemInfo.sub_type_schema.Select(x => x.Value.display_name ?? string.Empty).Max(x => x.Length);}
                                                    @foreach (var(key,value) in elemInfo.sub_type_schema.Where(item => item.Value.type != ElemType.Dict))
                                                    {
                                                        <div style="@(value.type == ElemType.Array && elemInfo.type != ElemType.Dict ? "margin-left:-10px" : "")">
                                                            <ElemComponent Key="@($"{Key}/{key}")" elemInfo="@value" SendValue="@((ElemInfo obj) => HandleChanges(obj, key))" Depth="@(Depth + 1)" Length="@maxLength" IsArrayElement="@IsArrayElement"></ElemComponent>
                                                        </div>
                                                    }
                                                </div>
                                            </div>
                                        }
                                    </div>
                                </div>
                            </li>
                            @{
                                var children = elemInfo.sub_type_schema.Where(item => item.Value.type == ElemType.Dict).
                                    ToDictionary(x => x.Key,y=>y.Value);
                                if (children.Any())
                                {
                                    <div class="@($"multi-collapse{id}") collapse" id="@($"dict{id}")">
                                        <div class="nested-element">
                                            @foreach (var (key,value) in children)
                                            {
                                                <ElemComponent Key="@($"{Key}/{key}")" elemInfo="@value" SendValue="@((ElemInfo obj) => HandleChanges(obj, key))" ExpandChanged="@((ElemInfo obj) => HandleExpandChanging(obj, key))" Depth="@(Depth + 1)" IsArrayElement="@IsArrayElement"></ElemComponent>
                                            }
                                        </div>
                                    </div>
                                }
                            }
                        </ul>
                    }
                        break;
                    case Control.Textarea:
                        <div class="elem-container @(string.IsNullOrEmpty(elemInfo.display_name) ? "in-default-array" : "")">
                            @if (IsArrayElement && !string.IsNullOrEmpty(elemInfo.display_name))
                            {
                                <input class="active-toggle" type="checkbox" disabled="@(!elemInfo.additional || elemInfo.readOnly || elemInfo.disable))" checked="@elemInfo.IsActive" @onclick="ExcludeField"/>
                            }
                            @if (!string.IsNullOrEmpty(elemInfo.display_name))
                            {
                                <h4 data-bs-toggle="tooltip" data-bs-custom-class="hydra-tooltip" data-bs-html="true"
                                    data-bs-placement="bottom" data-bs-title="@(!string.IsNullOrEmpty(elemInfo.description) ? elemInfo.description : "No description")" style="@(Length > 0 ? $"width:{(Length + 1) / 2 + 2}em" : "")">@elemInfo.display_name</h4>
                            }
                            <div class="@(Depth > 1 ? "flex-1":"") position-relative">
                                <textarea @onfocus="FocusCallBack" @onblur="BlurCallback" class="w-100" @attributes="ElementAttributes" validation-error="@(!elemInfo.isValid && (elemInfo.value != null && !string.IsNullOrEmpty(elemInfo.value.ToString()) || Depth == 1))" @onchange="@((e) => ChangeValue(e, elemInfo.type))">@elemInfo?.value</textarea>
                                @if (ShowAutoComplete())
                                {
                                    <AutoCompleteComponent TContext="@object" Value="@elemInfo.autocomplete" AutoCompleteFilled="@((value)=>UpdateElemValue(value,elemInfo.type))"></AutoCompleteComponent>
                                }
                                @if ((elemInfo.value == null || string.IsNullOrEmpty(elemInfo?.value.ToString())) && Depth == 1)
                                {
                                    <img class="error-icon" data-bs-toggle="tooltip" data-bs-custom-class="hydra-tooltip"
                                         data-bs-placement="top" data-bs-title="Enter field"/>

                                }
                                else if (elemInfo.value != null && !string.IsNullOrEmpty(elemInfo?.value.ToString()))
                                {
                                    if (!TryParseToType(elemInfo.value,elemInfo?.type))
                                    {
                                        <img class="error-icon" data-bs-toggle="tooltip" data-bs-custom-class="hydra-tooltip"
                                             data-bs-placement="top" data-bs-title="@($"Please input {elemInfo.type} type")"/>
                                    }
                                    else
                                    {
                                        var constraintItem = elemInfo.constraints.Find(item => !CheckConstraints(elemInfo.value, item, elemInfo.control));
                                        if (constraintItem != null)
                                        {
                                            <img class="error-icon" data-bs-toggle="tooltip" data-bs-custom-class="hydra-tooltip"
                                                 data-bs-placement="top" data-bs-title="@(constraintItem.message ?? $"{constraintItem.type}:{constraintItem.value}")"/>
                                        }
                                    }
                                }
                            </div>
                        </div>
                        break;
                    default:
                        <div class="elem-container @(string.IsNullOrEmpty(elemInfo.display_name) ? "in-default-array" : "")">
                            @if (IsArrayElement && !string.IsNullOrEmpty(elemInfo.display_name))
                            {
                                <input class="active-toggle" type="checkbox" disabled="@(!elemInfo.additional || elemInfo.readOnly || elemInfo.disable)" checked="@elemInfo.IsActive" @onclick="ExcludeField"/>
                            }
                            @if (!string.IsNullOrEmpty(elemInfo.display_name))
                            {
                                <h4 data-bs-toggle="tooltip" data-bs-custom-class="hydra-tooltip" data-bs-html="true"
                                    data-bs-placement="bottom" data-bs-title="@(!string.IsNullOrEmpty(elemInfo.description) ? elemInfo.description : "No description")" style="@(Length > 0 ? $"width:{(Length + 1) / 2 + 2}em" : "")">@elemInfo.display_name</h4>
                            }
                            <div class="@(Depth > 1 && elemInfo.control != Control.Checkbox ? "flex-1":"") position-relative">
                                <input @onfocus="FocusCallBack" @onblur="BlurCallback" class="w-100" @attributes="ElementAttributes" validation-error="@(!elemInfo.isValid && (elemInfo.value != null && !string.IsNullOrEmpty(elemInfo.value.ToString()) || Depth == 1))" size="@(elemInfo?.value != null ? elemInfo.value.ToString().Length - 3: 0)" value="@(elemInfo.control == Control.Checkbox ? "bool" : elemInfo.value)" @onchange="@((e) => ChangeValue(e, elemInfo.type))"/>
                                @if (ShowAutoComplete())
                                {
                                    <AutoCompleteComponent TContext="@object" Value="@elemInfo.autocomplete" AutoCompleteFilled="@((value)=>UpdateElemValue(value,elemInfo.type))"></AutoCompleteComponent>
                                }
                                @if ((elemInfo.value == null || string.IsNullOrEmpty(elemInfo?.value.ToString())) && Depth == 1)
                                {
                                    <img class="error-icon" data-bs-toggle="tooltip" data-bs-custom-class="hydra-tooltip"
                                         data-bs-placement="top" data-bs-title="Enter field"/>
                               
                                }
                                else if (elemInfo.value != null && !string.IsNullOrEmpty(elemInfo?.value.ToString()))
                                {
                                    if (!TryParseToType(elemInfo.value,elemInfo?.type))
                                    {
                                        <img class="error-icon" data-bs-toggle="tooltip" data-bs-custom-class="hydra-tooltip"
                                             data-bs-placement="top" data-bs-title="@($"Please input {elemInfo.type} type")"/>                                      
                                    }
                                    else
                                    {
                                        var constraintItem = elemInfo.constraints.Find(item => !CheckConstraints(elemInfo.value, item, elemInfo.control));
                                        if (constraintItem != null)
                                        {
                                            <img class="error-icon" data-bs-toggle="tooltip" data-bs-custom-class="hydra-tooltip"
                                                 data-bs-placement="top" data-bs-title="@(constraintItem.message ?? $"{constraintItem.type}:{constraintItem.value}")"/>   
                                        }
                                    }
                                }
                            </div>
                        </div>
                        break;

                }
            </div>
        }
        else
        {
            <div @ref="menuContainer" class="array-element @(!IsArrayElement ? "fit-content" : "") @(!IsArrayElement && elemInfo.Expand ? "resizer-border" : "") @(IsArrayElement ? "in-array" : "") @(Depth % 3 == 1 && !elemInfo.Expand && IsArrayElement ? "gray" : "") @(Depth % 3 == 2 && !elemInfo.Expand && IsArrayElement ? "blue" : "") @(Depth % 3  == 0 && !elemInfo.Expand && IsArrayElement ? "purple" : "")">
                @if (IsArrayElement)
                {
                    <input class="active-toggle" type="checkbox" disabled="@(!elemInfo.additional || elemInfo.readOnly || elemInfo.disable)" checked="@elemInfo.IsActive" @onclick="ExcludeField"/>
                }
                <fieldset>
                    <legend id="@(SettingsContainer.GetHash(Key))">
                        <h3 data-bs-toggle="tooltip" data-bs-custom-class="hydra-tooltip" data-bs-html="true"
                            data-bs-placement="bottom" data-bs-title="@(!string.IsNullOrEmpty(elemInfo.description) ? elemInfo.description : "No description")">@elemInfo.display_name</h3>
                        @if (!elemInfo.readOnly && elemInfo.IsActive && !elemInfo.disable)
                        {
                            switch (Depth % 3)
                            {
                                case 1:
                                    <img class="add-item @(Depth != 1 ? "small" : "") gray" @onclick="AddItem"/>
                                    break;
                                case 2:
                                    <img class="add-item blue small" @onclick="AddItem"/>
                                    break;
                                case 0:
                                    <img class="add-item purple small" @onclick="AddItem"/>
                                    break;
                            }
                        }
                        @switch (Depth % 3)
                        {
                            case 1:
                                <img class="expand-all @(Depth != 1 ? "small" : "") gray" data-bs-toggle="collapse" data-bs-target="@($"#el{elemInfo.GetHashCode()}")" aria-controls="@($"el{elemInfo.GetHashCode()}")" aria-expanded="false" @onclick="ExpandCollapseElement"/>
                                break;
                            case 2:
                                <img class="expand-all blue small" data-bs-toggle="collapse" data-bs-target="@($"#el{elemInfo.GetHashCode()}")" aria-controls="@($"el{elemInfo.GetHashCode()}")" aria-expanded="false" @onclick="ExpandCollapseElement"/>
                                break;
                            case 0:
                                <img class="expand-all purple small" data-bs-toggle="collapse" data-bs-target="@($"#el{elemInfo.GetHashCode()}")" aria-controls="@($"el{elemInfo.GetHashCode()}")" aria-expanded="false" @onclick="ExpandCollapseElement"/>
                                break;
                        }
                    </legend>
                    <div class="collapse" id="@($"el{elemInfo.GetHashCode()}")">
                        @if (elemInfo.array_sub_type_schema != null)
                        {
                            for (var i = 0; i < elemInfo.array_sub_type_schema.Count; i++)
                            {
                                var j = i;
                                var subTypeSchema = elemInfo.array_sub_type_schema[j];
                                <div class="array-trash-container @(subTypeSchema.ContainsKey("hydra_array_element") ? "default" : "")">
                                    <div class="elements-container" id="@SettingsContainer.GetHash(Key + j)">
                                        @{ var maxLength = subTypeSchema.Select(x => x.Value.display_name ?? string.Empty).Max(x=>x.Length);}
                                        @foreach (var (key, value) in subTypeSchema)
                                        {
                                            <div style="@(value.type == ElemType.Array ? "margin-left:-10px" : "")">
                                                <ElemComponent Key="@($"{Key}/{j}/{key}")" elemInfo="@value" SendValue="@((ElemInfo obj) => HandleArrayChanges(obj, key, j))" Depth="@(Depth + 1)" Length="@maxLength" IsArrayElement="@true"></ElemComponent>
                                            </div>
                                        }
                                    </div>
                                    @if (!elemInfo.readOnly && !elemInfo.disable)
                                    {
                                        <div class="dropend">
                                            <div class="trash-container dropdown-toggle @(Depth % 3 == 1 ? "gray" : "") @(Depth % 3 == 2 ? "blue" : "") @(Depth % 3 == 0 ? "purple" : "")" data-bs-toggle="dropdown" aria-expanded="false">
                                                <img class="trash-image"/>
                                            </div>
                                            <div class="dropdown-menu trash-menu">
                                                <div class="trash-menu-element" @onclick="@(() => CopyElement(j))">
                                                    <img class="copy-image"/>
                                                    <h4>Duplicate</h4>
                                                </div>
                                                <div class="trash-menu-element" @onclick="@(()=>DisableElement(j))">
                                                    <img class="@(subTypeSchema.Values.ToList().All(item=>item.disable) ? "enable-image" : "disable-image")"/>
                                                    <h4>@(subTypeSchema.Values.ToList().All(item=>item.disable) ? "Enable" : "Disable")</h4>
                                                </div>
                                                <div class="trash-menu-element" @onclick="@(() => RemoveArrayItem(j))">
                                                    <img class="delete-image"/>
                                                    <h4>Delete</h4>
                                                </div>
                                            </div>
                                        </div>
                                    }
                                </div>
                            }
                                            
                        }
                    </div>
                </fieldset>
                <img class="resizer @(!elemInfo.Expand || IsArrayElement ? "collapse" : "collapse show")" @ref="resizeContainer"/>
            </div>
           
        }
    }
}

@code {
    [Parameter]
    public string Key { get; set; }
    [Parameter] public EventCallback<ElemInfo> SendValue { get; set; }
    [Parameter] public EventCallback<ElemInfo> ExpandChanged { get; set; }
    [Parameter]
    public ElemInfo? elemInfo { get; set; }
    [Parameter]
    public int Depth { get; set; }
    [Parameter]
    public int Length { get; set; }
    [Parameter]
    public bool IsArrayElement { get; set; }

    private string filePath => elemInfo.fileId;
    private Dictionary<string, object>? ElementAttributes { get; set; } = new();
    private bool isShow;
    private bool showAutoComplete;
    private string pattern = @"^[a-zA-Z0-9`~!@#$%^&*()-_=+\[\]{}\\|;:'"",<.>/? ]*$";
    ElementReference menuContainer;
    ElementReference resizeContainer;
    private JsonSerializerOptions options = new()
    {
        Converters =
        {
            new JsonStringEnumConverter()
        },
    };
    IJSObjectReference? _module;
    private bool _canScroll;
    protected override void OnParametersSet()
    {
        ElementAttributes = new Dictionary<string, object>
        {
            {"tabindex",1},
            {"placeholder",elemInfo.placeholder},
            {"disabled",!elemInfo.IsActive || elemInfo.readOnly || elemInfo.disable}
        };
        AddElementAttributes(elemInfo);
    }

    protected override async Task OnParametersSetAsync()
    {
        if (elemInfo != null && isShow != elemInfo.Expand)
        {
            isShow = elemInfo.Expand;
            await ShowExpand();
        }
    }

    private async Task ShowExpand()
    {
        if (elemInfo.type == ElemType.Dict)
        {
            await JSRuntime.InvokeVoidAsync("utils.collapseExpand",$"dict{elemInfo.GetHashCode()}");
            await JSRuntime.InvokeVoidAsync("utils.collapseExpand",$"not-dict{elemInfo.GetHashCode()}");
        }
        else
        {
            await JSRuntime.InvokeVoidAsync("utils.collapseExpand",$"el{elemInfo.GetHashCode()}");
        }
    }
    protected override void OnInitialized()
    {
        if (Depth == 1) elemInfo.Expand = true;
        isShow = elemInfo.Expand;
    }

    protected override async Task OnInitializedAsync()
    {
        if (elemInfo != null && elemInfo.type != ElemType.Array)
        {
            var value = elemInfo?.value ?? string.Empty;
            if (!TryParseToType(value.ToString() ?? string.Empty, elemInfo.type))
            {
                elemInfo.isValid = false;
                await SendValue.InvokeAsync(elemInfo);
            }
        }
        
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            if (elemInfo.type == ElemType.Array && !IsArrayElement)
            {
                await JSRuntime.InvokeVoidAsync("utils.addListenersResize", resizeContainer, menuContainer);
            }
            _module = await JSRuntime.InvokeAsync<IJSObjectReference>("import", "./Components/ElemComponent.razor.js");
            if (elemInfo is {Expand: true })
            {
                await ShowExpand();
            }
        }
        else
        {
            if (_canScroll)
            {
                var id = SettingsContainer.GetHash(Key + $"{(elemInfo.value as List<object>).Count - 1}");
                await _module.InvokeVoidAsync("Scroll", id);
                _canScroll = false;
            }
        }
    }

    private bool TryParseToType(object? value,ElemType? type)
    {
        var valueString = value != null ? value.ToString() : string.Empty;
        if (elemInfo.additional && !elemInfo.IsActive || elemInfo.disable)
        {
            return true;
        }
        if (string.IsNullOrEmpty(valueString))
        {
            return false;
        }
        return type switch
        {
            ElemType.String=>Regex.IsMatch(valueString,pattern),
            ElemType.Double => CultureInfo.CurrentCulture.TwoLetterISOLanguageName switch
            {
                "en" => double.TryParse(valueString.Replace(",", "."), out _),
                "ru" => double.TryParse(valueString.Replace(".", ","), out _),
                _ => false
                },
            ElemType.Int => int.TryParse(valueString, out _),
            ElemType.DateTime => DateTime.TryParse(valueString, out _),
            ElemType.Bool => bool.TryParse(valueString, out _),
            _ => true
            };
    }

    private async Task ChangeValue(ChangeEventArgs obj,ElemType type)
    {
        var value = obj.Value;
        await UpdateElemValue(value,type);
    }

    private async Task UpdateElemValue(object value,ElemType type)
    {
        if (elemInfo.readOnly)
        {
            elemInfo.isValid = false;
            await SendValue.InvokeAsync(elemInfo);
            return;
        }
        elemInfo.value = value;
        ElementAttributes["validation-error"] = false;
        elemInfo.isValid = true;
        if (TryParseToType(value,elemInfo?.type) && !elemInfo.constraints.Exists(item=>!CheckConstraints(value,item,elemInfo.control)))
        {
            switch (type)
            {
                case ElemType.String:
                    elemInfo.value = value;
                    break;
                case ElemType.Int:
                    elemInfo.value = int.Parse(value.ToString());
                    break;
                case ElemType.Double:
                    elemInfo.value = CultureInfo.CurrentCulture.TwoLetterISOLanguageName switch
                    {
                        "en" => double.Parse(value.ToString().Replace(",", ".")),
                        "ru" => double.Parse(value.ToString().Replace(".", ",")),
                        _ => elemInfo.value
                        };
                    break;
                case ElemType.Bool:
                    elemInfo.value = bool.Parse(value.ToString());
                    break;
                case ElemType.DateTime:
                    elemInfo.value = DateTime.Parse(value.ToString());
                    break;
            }
        }
        else
        {
            elemInfo.isValid = false;
            ElementAttributes["validation-error"] = true;
        }
        await SendValue.InvokeAsync(elemInfo);
    }
    private async Task ChangeArrayValue(ChangeEventArgs obj,int i,ElemType type)
    {
        if (elemInfo.readOnly)
        {
            elemInfo.isValid = false;
            await SendValue.InvokeAsync(elemInfo);
            return;
        }
        var arrayItems = elemInfo.value as List<object>;
        arrayItems[i]=obj.Value?.ToString();
        if (arrayItems.Find(item => !TryParseToType(item?.ToString(), elemInfo?.sub_type) |
                                              string.IsNullOrEmpty(item.ToString()) | elemInfo.constraints.Exists(item=>!CheckConstraints(item.ToString(),item,elemInfo.control))) == null)
        {
            elemInfo.isValid = true;
            switch (type)
            {
                case ElemType.String:
                    elemInfo.value = arrayItems;
                    break;
                case ElemType.Int:
                    elemInfo.value = arrayItems.Select(item => int.Parse(item.ToString())).ToList();
                    break;
                case ElemType.Double:
                    switch (CultureInfo.CurrentCulture.TwoLetterISOLanguageName)
                    {
                        case "en":
                            elemInfo.value = arrayItems.Select(item => double.Parse(item.ToString().Replace(",", "."))).ToList();
                            break;
                        case "ru":
                            elemInfo.value = arrayItems.Select(item => double.Parse(item.ToString().Replace(",", "."))).ToList();
                            break;
                    }
                    break;
                case ElemType.Bool:
                    elemInfo.value = arrayItems.Select(item => bool.Parse(item.ToString())).ToList();
                    break;
                case ElemType.DateTime:
                    elemInfo.value = arrayItems.Select(item => DateTime.Parse(item.ToString())).ToList();
                    break;
            }
        }
        else
        {
            elemInfo.isValid = false;
        }
        await SendValue.InvokeAsync(elemInfo);
    }
    private void AddElementAttributes(ElemInfo? elemInfo)
    {
        switch (elemInfo?.control)
        {
            case Control.Text:
                ElementAttributes?.Add("type","text");
                break;
            case Control.Password:
                ElementAttributes?.Add("type","password");
                break;
            case Control.Date:
                ElementAttributes?.Add("type","date");
                break;
            case Control.Datetime:
                ElementAttributes?.Add("type","datetime-local");
                break;
            case Control.Time:
                ElementAttributes?.Add("type","time");
                break;
            case Control.Number:
                ElementAttributes?.Add("type","number");
                break;
            case Control.Checkbox:
                ElementAttributes?.Add("type","checkbox");
                if (elemInfo.value != null && bool.TryParse(elemInfo.value.ToString(),out _))
                {
                    ElementAttributes?.Add("checked", bool.Parse(elemInfo.value.ToString()));
                }
                break;
        }
        if (elemInfo.constraints is null)
        {
            elemInfo.constraints = new List<ConstraintItem>();
        }
        foreach (var constraint in elemInfo.constraints)
        {
            ElementAttributes?.Add(constraint.type, constraint.value);
        }
    }

    private async Task RemoveArrayItem(int pos)
    {
        elemInfo.isValid = true;
        var arrayItems = elemInfo.value as List<object?>;
        arrayItems?.RemoveAt(pos);
        if (elemInfo.array_sub_type_schema != null)
        {
            elemInfo.array_sub_type_schema.RemoveAt(pos);
            foreach (var item in elemInfo.array_sub_type_schema)
            {
                CheckValidation(item);
            }
        }
        await SendValue.InvokeAsync(elemInfo);
    }

    private Dictionary<string, object> GetSchema(Dictionary<string,ElemInfo> schema)
    {
        var dict = new Dictionary<string, object>();
        foreach (var kvp in schema)
        {
            var subElemInfo = kvp.Value.DeepCopy();
            if (subElemInfo.additional) continue;
            dict.Add(kvp.Key,subElemInfo.value);
            if (subElemInfo.sub_type_schema == null) continue;
            var subDict = GetSchema(subElemInfo.sub_type_schema);
            dict[kvp.Key] = subDict;
        }
        return dict;
    }

    private Dictionary<string, ElemInfo> ChangeReadonly(Dictionary<string, ElemInfo> schema)
    {
        var dict = new Dictionary<string, ElemInfo>();
        foreach (var kvp in schema)
        {
            var subElemInfo = kvp.Value.DeepCopy();
            if (subElemInfo.sub_type_schema != null)
            {
                var subDict = ChangeReadonly(subElemInfo.sub_type_schema);
                subElemInfo.sub_type_schema = subDict;
            }
            subElemInfo.readOnly = false;
            if (subElemInfo.additional)
            {
                subElemInfo.IsActive = false;
                subElemInfo.isValid = true;
            }
            else
            {
                subElemInfo.isValid = TryParseToType(subElemInfo.value, subElemInfo.type) && !subElemInfo.constraints.Exists(item => !CheckConstraints(subElemInfo.value, item, subElemInfo.control));
            }
            dict.Add(kvp.Key, subElemInfo);
            
        }
        return dict;
    }
    private async Task AddItem()
    {
        if (elemInfo.value is null) elemInfo.value = new List<object>();
        var arrayItems = elemInfo?.value as List<object>;
        if (elemInfo?.sub_type_schema != null)
        {
            var subTypeSchema = ChangeReadonly(elemInfo.sub_type_schema);
            CheckValidation(subTypeSchema);
            elemInfo?.array_sub_type_schema?.Add(subTypeSchema);
            if (elemInfo.sub_type_schema.Count == 1 && elemInfo.sub_type_schema.ContainsKey("hydra_array_element"))
            {
                arrayItems?.Add(string.Empty);
                elemInfo.isValid = false;
            }
            else
            {
                var valueDictionary = GetSchema(elemInfo.sub_type_schema);
                arrayItems?.Add(valueDictionary);
            };
        }
        _canScroll = true;
        await SendValue.InvokeAsync(elemInfo);
    }

    private bool CheckConstraints(object? value, ConstraintItem constraintItem,Control control)
    {
        if (elemInfo.additional && !elemInfo.IsActive)
        {
            return true;
        }
        var stringValue = value != null ? value.ToString() : string.Empty;
        return stringValue != null && constraintItem.type switch
        {
            "maxlength" => int.Parse(constraintItem.value) >= stringValue.Length,
            "minlength" => int.Parse(constraintItem.value) <= stringValue.Length,
            "max" => control switch
            {
                Control.Number or Control.Text or Control.Textarea => int.Parse(constraintItem.value) >= int.Parse(stringValue),
                Control.Datetime or Control.Date or Control.Time => DateTime.Parse(constraintItem.value) >= DateTime.Parse(stringValue),
                _ => true
                },
            "min" => control switch
            {
                Control.Number or Control.Text or Control.Textarea => int.Parse(constraintItem.value) <= int.Parse(stringValue),
                Control.Datetime or Control.Date or Control.Time => DateTime.Parse(constraintItem.value) <= DateTime.Parse(stringValue),
                _ => true
                },
            "pattern" => Regex.IsMatch(stringValue, constraintItem.value, RegexOptions.IgnoreCase),
            _ => true
            };
    }

    private async Task HandleChanges(ElemInfo obj, string key)
    {
        if (elemInfo != null)
        {
            elemInfo.isValid = true;
            if (elemInfo.sub_type_schema != null)
            {
                elemInfo.sub_type_schema[key] = obj;
                if (elemInfo.value is Dictionary<string, object> dict)
                {
                    switch (obj.additional)
                    {
                        case true when !dict.ContainsKey(key):
                        {
                            if (obj.IsActive) dict.Add(key,obj.value);
                            break;
                        }
                        case true when dict.ContainsKey(key):
                        {
                            if (!obj.IsActive) dict.Remove(key);
                            else dict[key] = obj.value;
                            break;
                        }
                    }
                    if (!obj.additional)
                    {
                        dict[key] = obj.value;
                    }
                    CheckValidation(elemInfo.sub_type_schema);
                }
                else
                {
                    elemInfo.value = obj.value;
                }
            }
            await SendValue.InvokeAsync(elemInfo);
        }
    }

    private async Task HandleExpandChanging(ElemInfo obj,string key)
    {
        elemInfo.sub_type_schema[key] = obj;
        await ExpandChanged.InvokeAsync(elemInfo);
    }
    private async Task HandleArrayChanges(ElemInfo obj, string key,int index)
    {
        elemInfo.isValid = true;
        if (elemInfo.value is List<object?> arr)
        {
            if (arr[index] is Dictionary<string, object> dict)
            {
                switch (obj.additional)
                {
                    case true when !dict.ContainsKey(key):
                    {
                        if (obj.IsActive) dict.Add(key,obj.value);
                        break;
                    }
                    case true when dict.ContainsKey(key):
                    {
                        if (!obj.IsActive) dict.Remove(key);
                        else dict[key] = obj.value;
                        break;
                    }
                }
                if (!obj.additional)
                {
                    dict[key] = obj.value;
                }
            }
            else
            {
                arr[index] = obj.value;
            }
            elemInfo.array_sub_type_schema[index][key] = obj;
            foreach (var item in elemInfo.array_sub_type_schema)
            {
                CheckValidation(item);
            }
            await SendValue.InvokeAsync(elemInfo);
        }
        
    }
    private void CheckValidation(Dictionary<string, ElemInfo> item)
    {
        foreach (var (key,subElemInfo) in item)
        {
            if (subElemInfo.sub_type_schema != null)
            {
                CheckValidation(subElemInfo.sub_type_schema);
            }
            if (subElemInfo.isValid) continue;
            elemInfo.isValid = false;
            break;
        }
    }

    public async ValueTask DisposeAsync()
    {
        if (elemInfo.type == ElemType.Array && !IsArrayElement)
        {
            await JSRuntime.InvokeVoidAsync("utils.clearListenersResize",resizeContainer);
        }
        if (_module != null) await _module.DisposeAsync();
    }

    private async Task ExpandCallback()
    {
        if (elemInfo != null)
        {
            isShow = elemInfo.Expand = !elemInfo.Expand;
            await ExpandChanged.InvokeAsync(elemInfo);
        }
    }

    private async Task ExpandCollapseElement()
    {
        isShow = elemInfo.Expand = !elemInfo.Expand;
        if (elemInfo.sub_type_schema == null) return;
        ExpandCollapseChildElements(elemInfo.sub_type_schema);
        await ExpandChanged.InvokeAsync(elemInfo);
    }
    private void ExpandCollapseChildElements(Dictionary<string, ElemInfo> elemInfos)
    {
        foreach (var keyValuePair in elemInfos)
        {
            keyValuePair.Value.Expand = elemInfo.Expand;
            if (keyValuePair.Value.sub_type_schema != null)
            {
                ExpandCollapseChildElements(keyValuePair.Value.sub_type_schema);
            }
        }
    }

    private async Task ExcludeField()
    {
        ChangeActiveStatus(elemInfo);
        await SendValue.InvokeAsync(elemInfo);
    }

    private void ChangeActiveStatus(ElemInfo el)
    {
        el.IsActive = !el.IsActive;
        if (!el.IsActive)
        {
            el.isValid = true;
        }
        else
        {
            el.isValid = TryParseToType(elemInfo.value,elemInfo.type) && !elemInfo.constraints.Exists(item => !CheckConstraints(elemInfo.value, item, elemInfo.control));
        }
        if (el.array_sub_type_schema != null)
        {
            foreach (var keyValuePair in el.array_sub_type_schema.SelectMany(elemInfos => elemInfos))
            {
                ChangeActiveStatus(keyValuePair.Value);
            }
        }
        else if (el.sub_type_schema != null)
        {
            foreach (var keyValuePair in el.sub_type_schema)
            {
                ChangeActiveStatus(keyValuePair.Value);
            }
        }
    }

    private async Task CopyElement(int index)
    {
        var arrayItems = elemInfo?.value as List<object>;
        if (elemInfo.array_sub_type_schema != null)
        {
            var subTypeSchema = elemInfo.array_sub_type_schema[index].ToDictionary(x => x.Key, y => y.Value.DeepCopy());
            elemInfo.array_sub_type_schema.Insert(index,subTypeSchema);
            if (elemInfo.sub_type_schema.Count == 1 && elemInfo.sub_type_schema.ContainsKey("hydra_array_element"))
            {
                var copyValue = arrayItems?[index];
                if (copyValue != null) arrayItems?.Insert(index, copyValue);
            }
            else
            {
                
                var copyValue = subTypeSchema.ToDictionary(x => x.Key,y=>y.Value.value);
                arrayItems?.Insert(index,copyValue);
            }
            
        }
        await SendValue.InvokeAsync(elemInfo);
    }

    private bool ShowAutoComplete()
    {
        if (showAutoComplete)
        {
            if (elemInfo.autocomplete == null || string.IsNullOrEmpty(elemInfo.autocomplete?.ToString()))
            {
                return false;
            }
            if (elemInfo.value != null && !string.IsNullOrEmpty(elemInfo.value.ToString()))
            {
                return false;
            }
            return true;
        }
        return false;
    }

    private async Task BlurCallback()
    {
        showAutoComplete = false;
        StateHasChanged();
    }

    private async Task FocusCallBack()
    {
        showAutoComplete = true;
        StateHasChanged();
    }

    private async Task DisableElement(int index)
    {
        if (elemInfo.array_sub_type_schema != null)
        {
            var isComment = elemInfo.array_sub_type_schema[index].Values.ToList().All(item=>item.commented);
            DisableChildren(elemInfo.array_sub_type_schema[index]);
            var inputUrl = $"{Key}/{index}";
            var currentItem = WizardContainer.CommentItems.Find(item => item.Url == inputUrl && item.FileId == elemInfo.fileId && item.IsComment == isComment);
            if (currentItem == null)
            {
                WizardContainer.CommentItems.Add(new CommentItem(){Url = inputUrl,FileId = elemInfo.fileId,IsComment = !isComment});
            }
            else
            {
                WizardContainer.CommentItems.Remove(currentItem);
            }
            elemInfo.isValid = !elemInfo.array_sub_type_schema.Any(item => item.Any(x => !x.Value.isValid));
            await SendValue.InvokeAsync(elemInfo);
        }
    }

    private void DisableChildren(Dictionary<string,ElemInfo> childElement, bool? disable = null)
    {
        foreach (var keyValuePair in childElement)
        {
            if (disable is null)
            {
                keyValuePair.Value.commented = !keyValuePair.Value.commented;
                keyValuePair.Value.disable = keyValuePair.Value.commented;
            }
            else
            {
                if (!keyValuePair.Value.commented) keyValuePair.Value.disable = (bool)disable;
            }
            if (keyValuePair.Value.sub_type_schema != null)
            {
                if (keyValuePair.Value.type == ElemType.Dict)
                {
                    DisableChildren(keyValuePair.Value.sub_type_schema, keyValuePair.Value.disable);
                }
                else if (keyValuePair.Value.type == ElemType.Array)
                {
                    foreach (var item in keyValuePair.Value.array_sub_type_schema)
                    {
                        DisableChildren(item, keyValuePair.Value.disable);
                    }
                }
            }
        }
    }
}