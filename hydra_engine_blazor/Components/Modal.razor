@inject IJSRuntime _jsRuntime
@using Microsoft.JSInterop
@using System.Collections.Immutable
@inherits EditForm

<dialog open="@IsOpened" @ref="obj">
    @if (EditContext is not null)
    {
        <EditForm EditContext="EditContext" OnValidSubmit="OnValidSubmit" OnSubmit="OnSubmit" OnInvalidSubmit="OnInvalidSubmit" AdditionalAttributes="AdditionalAttributes">
            <div class="modal-content">
                <div class="modal-header">
                    @Header
                </div>
                <div class="modal-body">
                    @Body
                </div>

                <div class="modal-footer">
                    @Footer
                </div>
            </div>
        </EditForm>
    }
    else
    {
        <EditForm Model="Model" OnValidSubmit="OnValidSubmit" OnSubmit="OnSubmit" OnInvalidSubmit="OnInvalidSubmit" AdditionalAttributes="AdditionalAttributes">
            <div class="modal-content">
                <div class="modal-header">
                    @Header
                </div>
                <div class="modal-body">
                    @Body
                </div>

                <div class="modal-footer">
                    @Footer
                </div>
            </div>
        </EditForm>
    }

</dialog>

@code {
    private bool IsOpened { get; set; }
    private IJSObjectReference? module;
    private ElementReference obj;

    [Parameter]
    public RenderFragment? Body { get; set; }

    [Parameter]
    public RenderFragment? Header { get; set; }

    [Parameter]
    public RenderFragment? Footer { get; set; }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            module = await _jsRuntime.InvokeAsync<IJSObjectReference>("import", "./Components/Modal.razor.js");
        }
    }

    public async Task Open()
    {
        await module.InvokeVoidAsync("Open", obj);
    }

    public async Task Close()
    {
        await module.InvokeVoidAsync("Close", obj);
    }

}
