@using hydra_engine_blazor.Models
@using DefaultNamespace
@inject WizardContainer WizardContainer
<button class="open-wizard-button" @onclick="async ()=> await WizardModal.Open()">Open Wizard</button>
<div class="wizard-container">
    <Modal Model="WizardModel" @ref="WizardModal">
        <Header>
            <div class="d-block">
                <h2 class="title">@WizardModel.Title</h2>
                @if (!string.IsNullOrEmpty(Output_URL) && Output_URL.Split("/").Length > 1)
                {
                    <div class="path-container">
                        @{
                            var urlsList = Output_URL.Split("/").ToList();
                            var href = "";
                            @foreach (var url in urlsList)
                            {
                                href += "/" + url;
                                <div class="path" last-child="@(urlsList.IndexOf(url) == urlsList.Count - 1)">
                                    @formNamesPath.Split("/")[urlsList.IndexOf(url)]
                                </div>
                                <img class="@(urlsList.IndexOf(url) != urlsList.Count - 1 && !string.IsNullOrEmpty(url) ? "right-arrow" : "")"/>
                            }
                        }
                    </div>
                }
            </div>
            <img @onclick="async () => await WizardModal.Close()" alt=""/>
        </Header>
        <Body>
        @foreach (var elem in currentControlsMeta.Elem)
        {
            <div class="form-elements-container">
                <div class="elements-container">
                    <div>
                         @foreach (var kvp in elem)
                         {
                             <ElemComponent Key="@kvp.Key" elemInfo="@kvp.Value" SendValue="@((obj) => ChangeValue(obj, kvp.Key))">
                             </ElemComponent>
                         }
                    </div>
                   
                </div>
            </div>
        }
        <div class="groups @(currentControlsMeta.Child.Where(item => item.Type.Equals("group")).ToList().Count == 0 ? "hide" : "")">
            @foreach (var item in currentControlsMeta.Child.Where(item => item.Type.Equals("group")))
            {
                <div tabindex="1">
                    <h2>@item.DisplayName</h2>
                    <h4>@item.Description</h4>
                    <div class="elements-container">
                        @foreach (var elem in item.Elem)
                        {
                            var uid = elem.Keys.ToList()[0];
                            <div class="elems-group">
                                @foreach (var kvp in elem)
                                {
                                    <ElemComponent Key="@kvp.Key" elemInfo="@kvp.Value" SendValue="@((obj) => ChangeValue(obj, kvp.Key))">
                                    </ElemComponent>
                                }
                            </div>
                        }
                    </div>
                </div>
            }
        </div>
        @foreach (var item in currentControlsMeta.Child.Where(item => item.Type.Equals("form")))
        {
            @if (currentControlsMeta.Child.Count(x => x.Type.Equals("form")) <= 1)
            {
                continue;
            }
            <div>
                <input type="radio" checked="@($"{item.Name}" == nextFormUrl.Split("/")[^1])" value="@item.DisplayName" @onchange="@(() => SelectForm(item.Name,item.DisplayName))"/>
                <p>@item.DisplayName</p>
            </div>
        }
        </Body>
        <Footer>
            <div class="prev-next-container">
                <button style="@(!string.IsNullOrEmpty(Output_URL) ? "visibility:visible" : "visibility:hidden")" type="reset" @onclick="PrevCallback">Back</button>
                <button style="@(currentControlsMeta.Child.Count > 0 ? "visibility:visible" : "visibility:hidden")" type="reset" class="next-button" @onclick="NextCallback"
                         disabled="@(changeElements.Exists(item => !item.Value.isValid))" >Next</button>
            </div>
        </Footer>
    </Modal>
</div>

@code {
    [Parameter]
    public string Output_URL { get; set; }

    private ControlsMeta currentControlsMeta = new();
    private WizardModel WizardModel = new();
    private Modal WizardModal = new();
    private string nextFormUrl = "";
    private string nextFormName = "";
    private string formNamesPath = "";
    private List<KeyValuePair<string, ElemInfo>> changeElements = new();

    protected override async Task OnInitializedAsync()
    {
        await UpdateWizardData();
    }

    private async Task PrevCallback()
    {
        var urlList = Output_URL.Split("/").ToList();
        urlList.Remove(urlList.Last());
        if (urlList.Count == 0) Output_URL = "";
        Output_URL = string.Join("/", urlList);
        var formsNameList = formNamesPath.Split("/").ToList();
        formsNameList.Remove(formsNameList.Last());
        if (formsNameList.Count == 0) formNamesPath = "";
        formNamesPath = string.Join("/", formsNameList);
        await UpdateWizardData();
    }

    private void SelectForm(string formName,string formDisplayName)
    {
        nextFormUrl = !string.IsNullOrEmpty(Output_URL) ? $"{Output_URL}/{formName}" : formName;
        nextFormName = !string.IsNullOrEmpty(formNamesPath) ? $"{formNamesPath}/{formDisplayName}" : formDisplayName;
    }

    private async Task NextCallback()
    {
        var condition = new List<Condition>();
        var conditions = currentControlsMeta.Child.Find(item => item.Name == nextFormUrl.Split("/")[^1])?.Condition;
        if (conditions != null)
        {
            foreach (var cond in conditions)
            {
                var values = new List<object>();
                var allow = new Dictionary<string, List<object>>();
                foreach (var elem in currentControlsMeta.Elem.Where(item => item.ContainsKey(cond.Key)))
                {
                    foreach (var kvp in elem)
                    {
                        var findEl = changeElements.Find(item => item.Key == kvp.Key);
                        if (!string.IsNullOrEmpty(findEl.Key))
                        {
                            values.Add(findEl.Value.value);
                            allow.Add("equals", values);
                            condition.Add(new Condition() { Key = findEl.Key, Allow = allow });
                        }
                        else
                        {
                            values.Add(kvp.Value.value);
                            allow.Add("equals", values);
                            condition.Add(new Condition() { Key = kvp.Key, Allow = allow });
                        }
                    }
                }
            }
        }
        var response = await WizardContainer.CheckCondition(nextFormUrl, condition);
        if (response.IsSuccessStatusCode)
        {
            Output_URL = nextFormUrl;
            formNamesPath = nextFormName;
            await UpdateWizardData();
        }
    }
    private void ChangeValue(ElemInfo obj,string key)
    {
        var elem = new KeyValuePair<string, ElemInfo>(key, obj);
        if (changeElements.Exists(item=>item.Key.Equals(elem.Key)))
        {
            var existElem = changeElements.Find(item => item.Key.Equals(elem.Key));
            var index = changeElements.IndexOf(existElem);
            changeElements.RemoveAt(index);
            changeElements.Insert(index,elem);
        }
        else
        {
            changeElements.Add(elem);
        }
        
    }

    private async Task UpdateWizardData()
    {
        currentControlsMeta = new ControlsMeta();
        changeElements.Clear();
        if (string.IsNullOrEmpty(Output_URL)) currentControlsMeta.Name = "tree";
        var query = await WizardContainer.GetFormInfo(Output_URL);
        if (query != null) JsonParser.DeserializeTree(query.ToString(),currentControlsMeta,currentControlsMeta.Child);
        WizardModel.Title = !string.IsNullOrEmpty(Output_URL) ? currentControlsMeta.DisplayName : "Main window";
        if (string.IsNullOrEmpty(Output_URL)) currentControlsMeta.Name = string.Empty;
        if (currentControlsMeta.Child.Count > 0)
        {
            nextFormUrl = (!string.IsNullOrEmpty(Output_URL) ? $"{Output_URL}/" : "") + currentControlsMeta.Child.Where(item => item.Type == "form").ToList()[0].Name;
            nextFormName = (!string.IsNullOrEmpty(formNamesPath) ? $"{formNamesPath}/" : "") + currentControlsMeta.Child.Where(item => item.Type == "form").ToList()[0].DisplayName;
        }
        else
        {
            nextFormUrl = "";
            nextFormName = "";
        }
    }

    private void PrevFormCallback(string url)
    {
        
    }

}