@using hydra_engine_blazor.Models
@using DefaultNamespace
@using System.Text.Json
@inject WizardContainer WizardContainer
<button class="open-wizard-button" @onclick="async ()=> await WizardModal.Open()">Open Wizard</button>
<div class="wizard-container">
    <Modal Model="WizardModel" @ref="WizardModal" IsOpened="true" OpenedAfterCreate="true">
        <Header>
            <div class="title-info">
                <h2 class="title">@WizardModel.Title</h2>
                @if (!string.IsNullOrEmpty(WizardModel.ControlsMeta.SiteName) && !string.IsNullOrEmpty(_archName))
                {
                    <h3>Architecture: @_archName</h3>
                    <h3>Site: @WizardModel.ControlsMeta.SiteName</h3>
                }
            </div>
            <img @onclick="async () => await WizardModal.Close()" alt=""/>
        </Header>
        <Body>
        <div class="wizard-content">
            @if (string.IsNullOrEmpty(Output_URL))
            {
                <h1 style="text-align: center">Welcome to the installation wizard Hydra</h1>
            }
            else
            {
              <div class="wizard-elements form-elements-container">
                <h3>@WizardModel.ControlsMeta.Description</h3>
                @foreach (var elem in WizardModel.ControlsMeta.Elem)
                {
                    <div class="elements-container">
                        <div>
                            @foreach (var kvp in elem)
                            {
                                <ElemComponent Key="@kvp.Key" elemInfo="@kvp.Value" SendValue="@((obj) => ChangeValue(obj, kvp.Key))" Depth="1">
                                </ElemComponent>
                            }
                        </div>
                    </div>
                }
                <div class="groups @(WizardModel.ControlsMeta.Child.Where(item => item.Type.Equals("group")).ToList().Count == 0 ? "hide" : "")">
                    @foreach (var item in WizardModel.ControlsMeta.Child.Where(item => item.Type.Equals("group")))
                    {
                        <div tabindex="1">
                            <h2>@item.DisplayName</h2>
                            <h4>@item.Description</h4>
                            <div class="elements-container">
                                @foreach (var elem in item.Elem)
                                {
                                    var uid = elem.Keys.ToList()[0];
                                    <div class="elems-group">
                                        @foreach (var kvp in elem)
                                        {
                                            <ElemComponent Key="@kvp.Key" elemInfo="@kvp.Value" SendValue="@((obj) => ChangeValue(obj, kvp.Key))" Depth="1">
                                            </ElemComponent>
                                        }
                                    </div>
                                }
                            </div>
                        </div>
                    }
                </div>
            </div>
                @if (WizardModel.ControlsMeta.Child.Count(x => x.Type.Equals("form")) > 1)
                {
                    <div class="wizard-child-forms">
                        @foreach (var item in WizardModel.ControlsMeta.Child.Where(item => item.Type.Equals("form")))
                        {
                            <div class="child-form-container @(item.Name == nextFormUrl.Split("/")[^1] ? "selected-form" : "")" @onclick="@(() => SelectForm(item.Name, item.DisplayName))">
                                @item.DisplayName
                            </div>
                        }
                    </div>
                }
            }
        </div>
        </Body>
        <Footer>
            <div class="prev-next-container">
                <button style="@(!string.IsNullOrEmpty(Output_URL) ? "visibility:visible" : "visibility:hidden")" type="reset" @onclick="PrevCallback">Back</button>
                <button style="@(WizardModel.ControlsMeta.Child.Count > 0 || WizardModel.ControlsMeta.Action == "init" ? "visibility:visible" : "visibility:hidden")" type="reset" class="next-button" @onclick="NextCallback"
                        disabled="@(changeElements.Exists(item => !item.Value.isValid))">Next</button>
            </div>
        </Footer>
    </Modal>
</div>

@code {
    private string Output_URL { get; set; }
    private WizardModel WizardModel = new();
    private Modal WizardModal = new();
    private string nextFormUrl = "";
    private string nextFormName = "";
    private string formNamesPath = "";
    private string _archName = "";
    private List<KeyValuePair<string, ElemInfo>> changeElements = new();

    protected override async Task OnInitializedAsync()
    {
        await UpdateWizardData(new List<Condition>(),new List<Dictionary<string, object>>());
        WizardModel.OnChange += StateHasChanged;
    }

    private async Task PrevCallback()
    {
        var urlList = Output_URL.Split("/").ToList();
        urlList.Remove(urlList.Last());
        if (urlList.Count == 0) Output_URL = "";
        Output_URL = string.Join("/", urlList);
        var formsNameList = formNamesPath.Split("/").ToList();
        formsNameList.Remove(formsNameList.Last());
        if (formsNameList.Count == 0) formNamesPath = "";
        formNamesPath = string.Join("/", formsNameList);
        await UpdateWizardData(new List<Condition>(),new List<Dictionary<string, object>>());
    }

    private void SelectForm(string formName,string formDisplayName)
    {
        nextFormUrl = !string.IsNullOrEmpty(Output_URL) ? $"{Output_URL}/{formName}" : formName;
        nextFormName = !string.IsNullOrEmpty(formNamesPath) ? $"{formNamesPath}/{formDisplayName}" : formDisplayName;
    }

    private async Task NextCallback()
    {
        if (WizardModel.ControlsMeta.Action == "init")
        {
            var response = await WizardContainer.InitArch(WizardModel.ControlsMeta.Name);
            if (response.IsSuccessStatusCode)
            {
                _archName = WizardModel.ControlsMeta.DisplayName;
                await UpdateWizardData(new List<Condition>(),new List<Dictionary<string, object>>()); // обновляем wizard после init.sh
            }
        }
        var condition = new List<Condition>();
        var conditions = WizardModel.ControlsMeta.Child.Find(item => item.Name == nextFormUrl.Split("/")[^1])?.Condition;
        if (conditions != null)
        {
            foreach (var cond in conditions)
            {
                var values = new List<object>();
                var allow = new Dictionary<string, List<object>>();
                foreach (var elem in WizardModel.ControlsMeta.Elem.Where(item => item.ContainsKey(cond.Key)))
                {
                    foreach (var kvp in elem)
                    {
                        var findEl = changeElements.Find(item => item.Key == kvp.Key);
                        if (!string.IsNullOrEmpty(findEl.Key))
                        {
                            values.Add(findEl.Value.value);
                            allow.Add("equals", values);
                            condition.Add(new Condition() { Key = findEl.Key, Allow = allow });
                        }
                        else
                        {
                            values.Add(kvp.Value.value);
                            allow.Add("equals", values);
                            condition.Add(new Condition() { Key = kvp.Key, Allow = allow });
                        }
                    }
                }
            }
        }
        HttpResponseMessage? deployResponse = null;
        if (WizardModel.ControlsMeta.Action == "deploy")
        {
            if (WizardModel.ControlsMeta.SiteName != null) deployResponse = await WizardContainer.DeploySite(WizardModel.ControlsMeta.SiteName);
        }
        if (deployResponse is null or {IsSuccessStatusCode: true })
        {
            Output_URL = nextFormUrl;
            formNamesPath = nextFormName;
            var prevFormValues = WizardModel.ControlsMeta.Elem.Select(dictionary => dictionary.ToDictionary(pair => pair.Key, pair => pair.Value.value)).ToList();
            await UpdateWizardData(condition,prevFormValues);
        }
        
    }
    private void ChangeValue(ElemInfo obj,string key)
    {
        var elem = new KeyValuePair<string, ElemInfo>(key, obj);
        if (changeElements.Exists(item=>item.Key.Equals(elem.Key)))
        {
            var existElem = changeElements.Find(item => item.Key.Equals(elem.Key));
            var index = changeElements.IndexOf(existElem);
            changeElements.RemoveAt(index);
            changeElements.Insert(index,elem);
        }
        else
        {
            changeElements.Add(elem);
        }
        
    }

    private async Task UpdateWizardData(List<Condition> conditions,List<Dictionary<string,object>> prevFormValues)
    {
        WizardModel.ControlsMeta = new ControlsMeta();
        changeElements.Clear();
        if (string.IsNullOrEmpty(Output_URL)) WizardModel.ControlsMeta.Name = "tree";
        var responseMessage = await WizardContainer.GetFormInfo(Output_URL,conditions,prevFormValues);
        if (responseMessage.IsSuccessStatusCode)
        {
            var query = await responseMessage.Content.ReadAsStringAsync();
            if (!string.IsNullOrEmpty(query)) JsonParser.DeserializeTree(query,WizardModel.ControlsMeta,WizardModel.ControlsMeta.Child);
            WizardModel.Title = !string.IsNullOrEmpty(Output_URL) ? WizardModel.ControlsMeta.DisplayName : "Main window";
            if (string.IsNullOrEmpty(Output_URL)) WizardModel.ControlsMeta.Name = string.Empty;
            if (WizardModel.ControlsMeta.Child.Count > 0)
            {
                nextFormUrl = (!string.IsNullOrEmpty(Output_URL) ? $"{Output_URL}/" : "") + WizardModel.ControlsMeta.Child.Where(item => item.Type == "form").ToList()[0].Name;
                nextFormName = (!string.IsNullOrEmpty(formNamesPath) ? $"{formNamesPath}/" : "") + WizardModel.ControlsMeta.Child.Where(item => item.Type == "form").ToList()[0].DisplayName;
            }
            else
            {
                nextFormUrl = "";
                nextFormName = "";
            }
        }
        
    }

}