@page "/{*Output_URL}"
@using hydra_engine_blazor.Models
@using DefaultNamespace
@inject SettingsContainer SettingsContainer
@inject IJSRuntime JSRuntime
@inject IToastService _toastService
@implements IAsyncDisposable
@layout MainLayout
<div class="page-container">
    <div @onfocusout="BlurCallback">
        <div class="input-search-container">
                <input type="search" placeholder="Search..." value="@searchValue" @oninput="SearchCallback" @onfocus="SearchOnFocus"/>
                <img/>
            </div>
            <div class="search-container" tabindex="1" @onfocusin="SearchOnFocus">
                <div class="cards-container @(visibility ? "" : "hidden")">
                    @foreach (var entity in _searchEntities)
                    {
                        <SearchCard Entity="entity" SendList="list => _searchEntities = list" Load="value => _load = value" Visibility="_visibility=>visibility=_visibility"></SearchCard>
                    }
                </div>
            </div>
    </div>
    <button id="save" class="save-button" disabled="@(string.IsNullOrEmpty(Output_URL) | 
                                                      currentControlsMeta.Elem.Count == 0 
                                                       & currentControlsMeta.Child.Where(item => item.Type.Equals("group")).Select(item => item.Elem.Count).Where(x => x > 0).ToList().Count == 0
                                                        | changeElements.Exists(item => !item.Value.isValid))" 
                    @onclick="SaveValues">Save</button>
    <button class="save-button" style="right: 150px" @onclick="async()=>await ResetModalWindow.Open()">Reset</button>
    <div class="form-container">
        <div class="element-container">
            <div class="path-container">
                @if (!string.IsNullOrEmpty(SettingsContainer.CurrentOutputUrl) & !string.IsNullOrEmpty(SettingsContainer.CurrentDisplayNamePath))
                {
                    var list = SettingsContainer.CurrentOutputUrl.Split("/").ToList();
                    var displayNameList = SettingsContainer.CurrentDisplayNamePath.Split("/").ToList();
                    var href = "";
                    if (list.Count == displayNameList.Count)
                    {
                        @foreach (var path in list)
                        {
                            href += path + "/";
                            <a class="path" href="@href.Remove(href.Length - 1)" last-child="@(list.IndexOf(path) == list.Count - 1)">
                                @displayNameList[list.IndexOf(path)]
                            </a>
                            <img class="@(list.IndexOf(path) != list.Count - 1 && !string.IsNullOrEmpty(path) ? "right-arrow" : "")"/>
                        }
                    }
                }
            </div>
            <div class="form-elements-container">
                <h2>@currentControlsMeta.DisplayName</h2>
                <h4>@currentControlsMeta.Description</h4>
                <div class="elements-container">
                    @foreach (var elem in currentControlsMeta.Elem)
                    {
                        var id = elem.Keys.ToList()[0];
                        <div id="@($"#f{SettingsContainer.GetHash(id)}")">
                            @foreach (var kvp in elem)
                            {
                                <ElemComponent Key="@kvp.Key" elemInfo="@kvp.Value" SendValue="@((obj) => ChangeValue(elem,obj, kvp.Key))" Depth="1">
                                </ElemComponent>
                            }
                        </div>
                    }
                </div>

            </div>
            <div class="groups @(currentControlsMeta.Child.Where(item => item.Type.Equals("group")).ToList().Count == 0 ? "hide" : "")">
                @foreach (var item in currentControlsMeta.Child.Where(item => item.Type.Equals("group")))
                {
                    var id = Output_URL + "/" + item.Name;
                    <div tabindex="1" id=@($"#g{SettingsContainer.GetHash(id)}")>
                        <h2>@item.DisplayName</h2>
                        <h4>@item.Description</h4>
                        <div class="elements-container">
                            @foreach (var elem in item.Elem)
                            {
                                var uid = elem.Keys.ToList()[0];
                                <div class="elems-group" id="@($"#f{SettingsContainer.GetHash(uid)}")">
                                    @foreach (var kvp in elem)
                                    {
                                        <ElemComponent Key="@kvp.Key" elemInfo="@kvp.Value" SendValue="@((obj) => ChangeValue(elem,obj, kvp.Key))" Depth="1">
                                        </ElemComponent>
                                    }
                                </div>
                            }
                        </div>
                    </div>
                }
            </div>
        </div>
        <div>
            @foreach (var item in currentControlsMeta.Child.Where(item => item.Type.Equals("form")))
            {
                <div class="forms-link-container">
                    @{var href = Output_URL + "/" + item.Name;}
                    <a class="path" href="@href">Link to @item.DisplayName</a>
                </div>
            }
        </div>
    </div>
    <Modal Model="ResetModel" @ref="ResetModalWindow" OnSubmit="ResetInfrastructure">
        <Header>
            <h2 class="title">@ResetModel.Title</h2>
            <img @onclick="async () => await ResetModalWindow.Close()" alt=""/>
        </Header>
        <Body>
            <h4 class="text-center">@ResetModel.Content</h4>
        </Body>
        <Footer>
            <button type="reset" @onclick="async () => { await ResetModalWindow.Close(); }">Cancel</button>
            <button type="submit">Submit</button>
        </Footer>
    </Modal>
</div>




@code{
    [Parameter]
    public string Output_URL { get; set; }
    IJSObjectReference? _module;
    private Modal ResetModalWindow { get; set; } = new();
    private ResetModel ResetModel { get; } = new();
    private List<ControlsMeta> groups;
    private List<ControlsMeta> forms;
    private ControlsMeta currentControlsMeta=new();
    private List<SearchEntity>? _searchEntities = new();
    private string? searchValue = string.Empty;
    bool _load; //For loading before start scrolling
    private List<KeyValuePair<string, ElemInfo>> changeElements = new();
    private Timer? _timer;
    private bool visibility = true;
    private bool shouldRender = true;

    protected override bool ShouldRender()
    {
        return shouldRender;
    }
    protected override async Task OnParametersSetAsync()
    {
        _load = false;
        SettingsContainer.CurrentOutputUrl = Output_URL;
        currentControlsMeta = new ControlsMeta();
        changeElements.Clear();
        if (!string.IsNullOrEmpty(Output_URL))
        {
            SettingsContainer.CurrentDisplayNamePath = SettingsContainer.DictOutputUrl.GetValueOrDefault(SettingsContainer.CurrentOutputUrl, "");
            var query = await SettingsContainer.GetFormInfo(Output_URL);
            if (query != null)
            {
                JsonParser.DeserializeTree(query.ToString(), currentControlsMeta, currentControlsMeta.Child);
                _load = true;
            }
            else
            {
                _toastService.ShowError("Failed to get form info");
            }
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            _module=await JSRuntime.InvokeAsync<IJSObjectReference>("import", "./Pages/Index.razor.js");
        }
        if (_load && _module != null)
        {
            await _module.InvokeVoidAsync("Scroll");
            _load = false;
        }
    }

    protected override void OnInitialized()
    {
        SettingsContainer.OnChange += StateHasChanged;
        SettingsContainer.CurrentOutputUrl = Output_URL;
    }
    private async Task SaveValues()
    {
        if (string.IsNullOrEmpty(Output_URL) |
            currentControlsMeta.Elem.Count == 0
            & currentControlsMeta.Child.Where(item => item.Type.Equals("group")).Select(item => item.Elem.Count).Where(x => x > 0).ToList().Count == 0
            | changeElements.Exists(item => !item.Value.isValid)) return;
        var checkResponse = await SettingsContainer.CheckModifyTime(SettingsContainer.ModifyTime);
        if (checkResponse.IsSuccessStatusCode)
        {
            var response = await SettingsContainer.SetValues(changeElements);
            if (response.IsSuccessStatusCode)
            {
                _toastService.ShowSuccess("All changes were successfully saved");
                changeElements.Clear();
                SettingsContainer.ModifyTime = await response.Content.ReadFromJsonAsync<DateTime>();
                var query = await SettingsContainer.GetFormInfo(Output_URL);
                if (query != null)
                {
                    currentControlsMeta = new ControlsMeta();
                    JsonParser.DeserializeTree(query.ToString(), currentControlsMeta, currentControlsMeta.Child);
                }
            }
            else
            {
                _toastService.ShowError("An error occurred while saving data");
            }
        }
        else
        {
            _toastService.ShowInfo("Saving cancelled. Your data is out of date, refresh the page to get the latest data.");
        }
    }

    private void SearchCallback(ChangeEventArgs obj)
    {
        shouldRender = false;
        searchValue = obj.Value?.ToString();
        _timer?.Dispose();
        _timer = new Timer(async _ =>
        {
            await OnSearchFinish();
        }, null, 250, Timeout.Infinite);
    }


    private void SearchOnFocus()
    {
        visibility = true;
        StateHasChanged();
    }

    private void ChangeValue(Dictionary<string,ElemInfo> elemInfos,ElemInfo obj,string key)
    {
        elemInfos[key] = obj;
        var elem = new KeyValuePair<string, ElemInfo>(key, obj);
        if (changeElements.Exists(item=>item.Key.Equals(elem.Key)))
        {
            var existElem = changeElements.Find(item => item.Key.Equals(elem.Key));
            var index = changeElements.IndexOf(existElem);
            changeElements.RemoveAt(index);
            changeElements.Insert(index,elem);
        }
        else
        {
            changeElements.Add(elem);
        }
        StateHasChanged();
        
    }

    private async Task ResetInfrastructure()
    {
        var result = await SettingsContainer.ResetInfrastructure();
        if (!result.IsSuccessStatusCode)
        {
            _toastService.ShowError(result.ReasonPhrase);
        }
        await ResetModalWindow.Close();
        await _module.InvokeVoidAsync("ReloadPage");
    }
    private async Task OnSearchFinish()
    {
        shouldRender = true;
        if (string.IsNullOrEmpty(searchValue)){ _searchEntities?.Clear();return;}
        _searchEntities = await SettingsContainer.SearchRequest(searchValue);
        StateHasChanged();
    }

    private void BlurCallback()
    {
        visibility = false;
        StateHasChanged();
    }

    public async ValueTask DisposeAsync()
    {
        if (_module != null) await _module.DisposeAsync();
        if (_timer != null) await _timer.DisposeAsync();
        SettingsContainer.OnChange -= StateHasChanged;
    }

}