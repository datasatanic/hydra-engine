@page "/wizard"
@using DefaultNamespace
@using hydra_engine_blazor.Models
@using System.Text.Json
@layout WizardLayout
@inject WizardContainer WizardContainer;
@inject IToastService _toastService
@inject WizardModel WizardModel
@inject NavigationManager _navigationManager
@inject IJSRuntime JsRuntime
<div class="wizard-page-container">
    @if (!_load)
    {
        @if (WizardContainer.WizardState.Arch.StatusEnum == ArchStatus.InProgress)
        {
            <Loader Color="#4A67F4" Title="@($"Initializing {WizardContainer.WizardState.Arch.ArchName}")"></Loader>
        }
        else
        {
            <Loader Color="#4A67F4" Title="Loading"></Loader>
        }
        
    }
    else if (string.IsNullOrEmpty(Output_URL))
    {
        <div class="welcome-container">
            <h1 class="welcome-title">Welcome to the CCFA Product Installation Wizard</h1>
            <h4>The wizard will guide you through the process of creating a new project. The result will be... Please note that the wizard is... The wizard will guide you through the process of creating a new project.</h4>
            <img class="hydra-welcome-image"/>
            <button class="welcome-button primary-button" @onclick="StartCallback">Let's get started</button>
        </div>
    }
    else
    {
        <div class="wizard-container">
            <div class="title-info">
                <div>
                    <h3 class="title">@WizardModel.Title</h3>
                    @if (ExistExpandElements(WizardModel.ControlsMeta.Elem.SelectMany(item => item.Values).ToList()))
                    {
                        <img class="@(!WizardModel.IsExpandAll ? "expand-all" : "collapse-all")" @onclick="@(() => ExpandCollapseAll(WizardModel.ControlsMeta.Elem))"/>
                    }
                </div>
                @if (!string.IsNullOrEmpty(WizardModel.ControlsMeta.Description))
                {
                    <h4>@WizardModel.ControlsMeta.Description</h4>
                }
                @if (WizardModel.ControlsMeta.Child.Count == 0)
                {
                    <h4>@(WizardContainer.WizardState.Sites.All(item=>item.StatusEnum == ArchStatus.Completed) ? "Hydra installation completed successfully" : "Waiting for deployment last site")</h4>
                }
            </div>
            <div class="wizard-content">
                <div class="wizard-container">
                    <div class="wizard-elements form-elements-container">
                        @foreach (var elem in WizardModel.ControlsMeta.Elem)
                        {
                            <div>
                                @foreach (var kvp in elem)
                                {
                                    <ElemComponent Key="@kvp.Key" elemInfo="@kvp.Value" SendValue="@((obj) => ChangeValue(obj, kvp.Key,kvp.Value))" Depth="1">
                                    </ElemComponent>
                                }
                            </div>
                        }
                        <div class="wizard-child-groups @(formGroups.Count == 0 ? "hide" : "")">
                            @foreach (var item in formGroups)
                            {
                                <div class="child-group-container @(item.Name == WizardContainer.WizardState.Arch.ArchName ? "selected-form" : "")" @onclick="@(() => SelectArch(item.Name))">
                                    <div>
                                        <h3 style="font-weight: 600">@item.DisplayName</h3>
                                    </div>
                                    <h4>@item.Description</h4>
                                    <div @onclick="async () => await ArchModalWindow.Open()">
                                        <h4 class="link">Details</h4>
                                        <img class="arch-info"/>
                                    </div>
                                    @if (item.Name == WizardContainer.WizardState.Arch.ArchName)
                                    {
                                        <img class="selected-icon"/>
                                    }
                                </div>
                            }
                        </div>
                    </div>
                </div>
            </div>
            <div class="prev-next-container">
                <button class="prev-button ghost-button" @onclick="PrevCallback" disabled="@(WizardContainer.WizardState.Arch.StatusEnum == ArchStatus.Completed && WizardContainer.WizardState.CurrentStep.Split("/").Length == 2
                                                                                             || WizardContainer.WizardState.Sites.Count > 0 && WizardContainer.WizardState.Sites[^1].StatusEnum is ArchStatus.InProgress or ArchStatus.Completed 
                                                                                             && Output_URL.Split("/").Length - 1 == WizardContainer.WizardState.Sites[^1].StepNumber)">
                    <img/>
                    Back
                </button>
                <button class="next-button primary-button" @onclick="NextCallback"
                        disabled="@(changeElements.Exists(item => !item.Value.isValid)
                                    || WizardContainer.WizardState.Arch.StatusEnum == ArchStatus.InProgress || WizardContainer.WizardState.Sites.Find(item => item.StatusEnum == ArchStatus.InProgress) != null && WizardModel.ControlsMeta.Action == "deploy"
                                    || WizardModel.ControlsMeta.Child.Count == 0 && WizardContainer.WizardState.Sites.Exists(item=>item.StatusEnum is ArchStatus.InProgress or ArchStatus.NotCompleted))">
                    @(WizardModel.ControlsMeta.Child.Count > 0 ? "Next" : "Finish")
                    <img style="@(WizardModel.ControlsMeta.Child.Count == 0 ? "display:none" : "")"/>
                </button>
            </div>
        </div>
    }
    @{
        var arch = formGroups.Find(item => item.Name == WizardContainer.WizardState.Arch.ArchName);
        if (arch != null)
        {
            <Modal Model="arch" @ref="ArchModalWindow">
                <Header>
                    <h3>@arch.DisplayName</h3>
                    <img @onclick="async () => await ArchModalWindow.Close()" alt=""/>
                </Header>
                <Body>
                @foreach (var kvp in arch.Elem.SelectMany(dict => dict))
                {
                    <ElemComponent Key="@kvp.Key" elemInfo="@kvp.Value" Depth="1"></ElemComponent>
                }
                </Body>
            </Modal>
        }
    }

</div>
@code {
    private string Output_URL { get; set; }
    private string nextFormUrl = "";
    private string nextFormName = "";
    private string formNamesPath = "";
    private Modal ArchModalWindow { get; set; }
    private List<KeyValuePair<string, ElemInfo>> changeElements = new();
    private ControlsMeta? _currentGroup;
    private List<ControlsMeta> formGroups = new();
    private Timer? _timer;
    private bool _load;
    protected override async Task OnInitializedAsync()
    {
        WizardContainer.WizardState = await WizardContainer.GetWizardState();
        Console.WriteLine(JsonSerializer.Serialize(WizardContainer.WizardState));
        Output_URL = WizardContainer.WizardState.CurrentStep;
        await UpdateWizardData(new List<Condition>());
        WizardModel.OnChange += StateHasChanged;
        _load = true;
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await JsRuntime.InvokeVoidAsync("utils.initTooltip");
    }

    private async Task PrevCallback()
    {
        if (WizardContainer.WizardState.Arch.StatusEnum == ArchStatus.Completed && WizardContainer.WizardState.CurrentStep.Split("/").Length == 2)
        {
            return;
        }
        if (WizardContainer.WizardState.Sites.Count > 0 && WizardContainer.WizardState.Sites[^1].StatusEnum is ArchStatus.InProgress or ArchStatus.Completed 
            && Output_URL.Split("/").Length - 1 == WizardContainer.WizardState.Sites[^1].StepNumber)
        {
            return;
        }
        _load = false;
        var urlList = Output_URL.Split("/").ToList();
        urlList.RemoveAt(urlList.Count - 1);
        if (urlList.Count == 0) Output_URL = "";
        Output_URL = string.Join("/", urlList);
        var formsNameList = formNamesPath.Split("/").ToList();
        formsNameList.Remove(formsNameList.Last());
        if (formsNameList.Count == 0) formNamesPath = "";
        formNamesPath = string.Join("/", formsNameList);
        WizardContainer.WizardState.CurrentStep = Output_URL;
        await UpdateWizardData(new List<Condition>());
        _load = true;
    }

    private void SelectArch(string formName)
    {
        WizardContainer.WizardState.Arch.ArchName = formName;
    }

    private async Task NextCallback()
    {
        if (WizardContainer.WizardState.Arch.StatusEnum == ArchStatus.InProgress || WizardContainer.WizardState.Sites.Exists(item => item.StatusEnum is ArchStatus.InProgress or ArchStatus.NotCompleted) && WizardModel.ControlsMeta.Action == "deploy")
        {
            return;
        }
        if (WizardModel.ControlsMeta.Child.Count == 0 && WizardContainer.WizardState.Sites.Exists(item => item.StatusEnum is ArchStatus.InProgress or ArchStatus.NotCompleted))
        {
            return;
        }
        if (WizardModel.ControlsMeta.Child.Count == 0 && WizardContainer.WizardState.Sites.All(item => item.StatusEnum == ArchStatus.Completed))
        {
            _navigationManager.NavigateTo("https://www.youtube.com/watch?v=dQw4w9WgXcQ");
            return;
        }
        _load = false;
        HttpResponseMessage? saveResponse = null;
        if (WizardModel.ControlsMeta.Action == "init")
        {
            WizardContainer.WizardState.Arch.StatusEnum = ArchStatus.InProgress;
            var response = await WizardContainer.InitArch(WizardContainer.WizardState.Arch.ArchName);
            if (response.IsSuccessStatusCode)
            {
                await UpdateWizardData(new List<Condition>()); // обновляем wizard после init.sh
                WizardContainer.WizardTree = await WizardContainer.UpdateLayoutTree();
                WizardContainer.WizardState.Arch.StatusEnum = ArchStatus.Completed;
            }
            else
            {
                _toastService.ShowError($"An error occured when trying to init architecture of {WizardModel.ControlsMeta.Name}");
            }
        }
        else if (formGroups.Count == 0)
        {
            saveResponse = await WizardContainer.SetValues(changeElements,Output_URL);
        }
        if (saveResponse is null or {IsSuccessStatusCode:true})
        {
            if (WizardModel.ControlsMeta.Action == "deploy" && WizardModel.ControlsMeta.SiteName != null)
            {
                var stepNumber = Output_URL.Split("/").Length;
                var deployResponse = await WizardContainer.DeploySite(WizardModel.ControlsMeta.SiteName,stepNumber);
                if (deployResponse.IsSuccessStatusCode)
                {
                    var site = await deployResponse.Content.ReadFromJsonAsync<Site>();
                    if (site != null)
                    {
                        site.StatusEnum = ArchStatus.InProgress;
                        WizardContainer.WizardState.AddSite(site);
                        _timer = new Timer(async _ =>
                        {
                            try
                            {
                                WizardContainer.WizardState.Sites = await WizardContainer.CheckDeploy();
                                if (WizardContainer.WizardState.Sites[^1].StatusEnum != ArchStatus.Completed) return;
                                _timer?.DisposeAsync();
                                _toastService.ShowSuccess($"Site {site.SiteName} has been deployed successfully");
                                StateHasChanged();
                            }
                            catch (Exception)
                            {
                                _timer?.DisposeAsync();
                                _toastService.ShowError($"An error occured when deploying site {site.SiteName}");
                                StateHasChanged();
                            }
                        }, null, 10000, 10000);
                    }
                }
            }
            var condition = new List<Condition>();
            //var conditions = WizardModel.ControlsMeta.Child.Find(item => item.Name == nextFormUrl.Split("/")[^1])?.Condition;
            Output_URL = nextFormUrl;
            WizardContainer.WizardState.CurrentStep = Output_URL;
            formNamesPath = nextFormName;
            await UpdateWizardData(condition);
        }
        else
        {
            _toastService.ShowError("An error occured when trying to save new values of parameters");
        }
        _load = true;
    }
    private void ChangeValue(ElemInfo obj,string key, ElemInfo currentElem)
    {
        if (obj.value != currentElem.value)
        {
            var elem = new KeyValuePair<string, ElemInfo>(key, obj);
            if (changeElements.Exists(item=>item.Key.Equals(elem.Key)))
            {
                var existElem = changeElements.Find(item => item.Key.Equals(elem.Key));
                var index = changeElements.IndexOf(existElem);
                changeElements.RemoveAt(index);
                changeElements.Insert(index,elem);
            }
            else
            {
                changeElements.Add(elem);
            }
        }
        WizardModel.NotifyStateChanged();
    }

    private async Task UpdateWizardData(List<Condition> conditions)
    {
        WizardModel.ControlsMeta = new ControlsMeta();
        WizardModel.Title = "Loading...";
        changeElements.Clear();
        if (string.IsNullOrEmpty(Output_URL)) WizardModel.ControlsMeta.Name = "tree";
        var responseMessage = await WizardContainer.GetFormInfo(Output_URL,conditions);
        if (responseMessage.IsSuccessStatusCode)
        {
            var query = await responseMessage.Content.ReadAsStringAsync();
            if (!string.IsNullOrEmpty(query)) JsonParser.DeserializeTree(query,WizardModel.ControlsMeta,WizardModel.ControlsMeta.Child);
            WizardModel.Title = !string.IsNullOrEmpty(Output_URL) ? WizardModel.ControlsMeta.DisplayName : "Main window";
            if (string.IsNullOrEmpty(Output_URL)) WizardModel.ControlsMeta.Name = string.Empty;
            var childForms = WizardModel.ControlsMeta.Child.Where(item => item.Type == "form").ToList();
            if (childForms.Count > 0)
            {
                nextFormUrl = (!string.IsNullOrEmpty(Output_URL) ? $"{Output_URL}/" : "") + childForms[0].Name;
                nextFormName = (!string.IsNullOrEmpty(formNamesPath) ? $"{formNamesPath}/" : "") + childForms[0].DisplayName;
            }
            else
            {
                nextFormUrl = "";
                nextFormName = "";
            }
            formGroups = WizardModel.ControlsMeta.Child.Where(item => item.Type.Equals("group")).ToList();
            if (formGroups.Count > 0)
            {
                _currentGroup = formGroups[0];
                WizardContainer.WizardState.Arch.ArchName = _currentGroup.Name;
            }
        }
        else
        {
            _toastService.ShowError("An error occured when updating wizard data");
        }

    }

    private void SelectGroup(ControlsMeta group)
    {
        if (_currentGroup == group) return;
        var index = formGroups.IndexOf(group);
        if (index == 0)
        {
            _currentGroup = group;
        }
        else
        {
            var currentIndex = formGroups.IndexOf(_currentGroup);
            if (currentIndex == -1) return;
            if (currentIndex > index)
            {
                _currentGroup = group;
            }
            else
            {
                if (CheckForbid(group))
                {
                    return;
                }
                _currentGroup = group;
            }
        }
    }

    private bool CheckForbid(ControlsMeta group)
    {
        return _currentGroup != null
               && _currentGroup.Elem.SelectMany(item=>item.Values).Any(item=>!item.isValid) 
               && formGroups.IndexOf(group) > formGroups.IndexOf(_currentGroup);
    }
    private async Task StartCallback()
    {
        Output_URL = "root";
        WizardContainer.WizardState.CurrentStep = Output_URL;
        await NextCallback();
    }

    private bool ExistExpandElements(List<ElemInfo> formElementsValues)
    {
        if (formElementsValues.Any(elemInfo => elemInfo.type == ElemType.Dict))
        {
            return true;
        }
        var childElements = formElementsValues.Where(item => item.type == ElemType.Array && item.sub_type == ElemType.Composite).ToList();
        return childElements.Count > 0 && childElements.Select(element => element.sub_type_schema.Select(x => x.Value).ToList()).Any(ExistExpandElements);
    }
    private void ExpandCollapseAll(List<Dictionary<string,ElemInfo>> elementsList)
    {
        WizardModel.IsExpandAll = !WizardModel.IsExpandAll;
        foreach (var elemInfos in elementsList)
        {
           ExpandCollapseChildElements(elemInfos);
        }
    }

    private void ExpandCollapseChildElements(Dictionary<string, ElemInfo> elemInfos)
    {
        foreach (var keyValuePair in elemInfos)
        {
            keyValuePair.Value.Expand = WizardModel.IsExpandAll;
            if (keyValuePair.Value.sub_type_schema != null)
            {
                ExpandCollapseChildElements(keyValuePair.Value.sub_type_schema);
            }
        }
    }

}